{"version":3,"sources":["../../../src/api/routes/auth.js"],"names":["Router","AuthValidator","AuthService","UpRole","PermissionsService","route","app","use","post","signupValidator","req","res","next","newUser","SignUp","json","message","status","e","signinValidator","SignIn","body"],"mappings":"AAAA,SAASA,MAAT,QAAuB,SAAvB;AACA,SAAQC,aAAR,QAA4B,qBAA5B;AACA,SAAQC,WAAR,QAA0B,kBAA1B;AACA,SAAQC,MAAR,QAAqB,gBAArB;AACA,SAAQC,kBAAR,QAAiC,oCAAjC;;AAGA,MAAMC,QAAQL,QAAd;;AAEA,gBAAgBM,GAAD,IAAQ;AACnBA,QAAIC,GAAJ,CAAQ,OAAR,EAAiBF,KAAjB;AACAA,UAAMG,IAAN,CAAW,SAAX,EAAsBP,cAAcQ,eAApC,EAAqD,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAC3E,YAAI;;AAEA,kBAAMC,UAAU,MAAMX,YAAYY,MAAZ,CAAmBJ,GAAnB,CAAtB;AACA;AACA;;AAEA,mBAAOC,IAAII,IAAJ,CAAS,EAAEC,SAAS,uBAAX,EAAoCH,OAApC,EAAT,EAAwDI,MAAxD,CAA+D,GAA/D,CAAP;AACH,SAPD,CAOE,OAAOC,CAAP,EAAU;AACR,mBAAON,KAAKM,CAAL,CAAP;AACH;AACJ,KAXD;AAYAb,UAAMG,IAAN,CAAW,SAAX,EAAsBP,cAAckB,eAApC,EAAqD,OAAOT,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAC3E,YAAI;AACA,kBAAMC,UAAU,MAAMX,YAAYkB,MAAZ,CAAmBV,IAAIW,IAAvB,CAAtB;AACA,mBAAOV,IAAII,IAAJ,CAAS;AACZE,wBAAO,SADK;AAEZD,yBAAS,mBAFG,EAEkBH,OAFlB,EAAT,EAEsCI,MAFtC,CAE6C,GAF7C,CAAP;AAGH,SALD,CAKE,OAAOC,CAAP,EAAU;AACR,mBAAOP,IAAII,IAAJ,CAAS;AACZE,wBAAO,OADK;AAEZD,yBAASE,EAAEF,OAFC,EAAT,EAEkBC,MAFlB,CAEyB,GAFzB,CAAP;AAGH;AACJ,KAXD;AAcH,CA5BD","file":"auth.js","sourcesContent":["import { Router } from 'express'\r\nimport {AuthValidator} from \"../../lib/validator\";\r\nimport {AuthService} from \"@yuyuid/services\";\r\nimport {UpRole} from \"@yuyuid/models\";\r\nimport {PermissionsService} from \"../../services/permissions.service\";\r\n\r\n\r\nconst route = Router()\r\n\r\nexport default (app)=> {\r\n    app.use('/auth', route)\r\n    route.post(\"/signup\", AuthValidator.signupValidator, async (req, res, next) => {\r\n        try {\r\n\r\n            const newUser = await AuthService.SignUp(req);\r\n            // const roles = await PermissionsService.FindRolesByName(newUser.user.role)\r\n            // await AuthService.RolesPermissions(newUser.user._id,roles.id)\r\n\r\n            return res.json({ message: \"Register successfully\", newUser }).status(201);\r\n        } catch (e) {\r\n            return next(e);\r\n        }\r\n    });\r\n    route.post(\"/signin\", AuthValidator.signinValidator, async (req, res, next) => {\r\n        try {\r\n            const newUser = await AuthService.SignIn(req.body);\r\n            return res.json({\r\n                status:\"success\",\r\n                message: \"Sign successfully\", newUser }).status(200);\r\n        } catch (e) {\r\n            return res.json({\r\n                status:\"error\",\r\n                message: e.message}).status(400);\r\n        }\r\n    });\r\n\r\n\r\n}\r\n"]}