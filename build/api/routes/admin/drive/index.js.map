{"version":3,"sources":["../../../../../src/api/routes/admin/drive/index.js"],"names":["Router","UserService","formidable","BodyResponse","CreateFolder","drive","generatePublic","oauth2Client","uploadFile","HashId","request","fs","route","app","use","get","req","res","next","id","params","prefix","process","env","PREFIX_DRIVE_URI","url","error","response","body","statusCode","data","headers","Buffer","from","toString","status","json","err","folderId","fileMetadata","parents","files","create","requestBody","name","mimeType","media","console","log","message","post","form","IncomingForm","parse","fields","end","thumbnail","uploaded","path","filepath","fileName","newFilename","mimetype","responsePublic","prefix_url"],"mappings":"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","file":"index.js","sourcesContent":["import { Router } from 'express'\r\nimport {UserService} from \"@yuyuid/services\";\r\nimport formidable  from 'formidable';\r\nimport BodyResponse from \"../../../../lib/handler/body-response\";\r\nimport {CreateFolder, drive, generatePublic, oauth2Client, uploadFile} from \"../../../../lib/modules/google-apis\";\r\nimport {HashId} from \"@yuyuid/utils\";\r\nimport request from \"request\";\r\nimport fs from 'fs'\r\nconst route = Router()\r\n\r\nexport default (app)=> {\r\n    app.use('/drive',route)\r\n    route.get('/images/:id',async (req,res,next)=> {\r\n        try{\r\n            let {id} = req.params\r\n            let prefix = process.env.PREFIX_DRIVE_URI\r\n            const url = prefix + id\r\n            await request.get(url, function (error, response, body) {\r\n                if (!error && response.statusCode === 200) {\r\n                    const data = \"data:\" + response.headers[\"content-type\"] + \";base64,\" + Buffer.from(body).toString('base64');\r\n                    return res.status(200).json(data)\r\n                }\r\n            });\r\n        }catch (err){\r\n            throw next(err)\r\n        }\r\n    })\r\n    route.get('/create/folder', async function(req,res,next){\r\n        try{\r\n            // oauth2Client.getToken(\"376975227947-jrl590jgaec1bha42kohshl768gg5p5v.apps.googleusercontent.com\").then(function(tokens){\r\n            //     console.log(tokens)\r\n            // }).catch(function(err){\r\n            //     console.log(err)\r\n            // })\r\n            await CreateFolder('travel-apps')\r\n            var folderId = '1LTRVvRUc-Nx_Gpz-Kh53vP1-Gt0vUGkS';\r\n            var fileMetadata = {\r\n                'name': 'photo.jpg',\r\n                parents: [ folderId ]\r\n            };\r\n            const response = await drive.files.create({\r\n                requestBody: {\r\n                    name: \"beautifulfirl.jpg\",\r\n                    mimeType: \"image/jpg\",\r\n                },\r\n                media: {\r\n                    mimeType: \"image/jpg\",\r\n                    // body: fs.createReadStream(filePath)\r\n                }\r\n            })\r\n            console.log(response.data)\r\n            // console.log(\"FOLDER : \",folder)\r\n\r\n            return res.status(200).json(new BodyResponse({error:false,message: null, data:\"lorem ipsum dolor sit amet\"}))\r\n        }catch(err){\r\n            return res.status(500).json(new BodyResponse({error:true,message:err.message}))\r\n        }\r\n    })\r\n    route.post('/create/photo', async function (req,res,next) {\r\n        try{\r\n            const form = new formidable.IncomingForm()\r\n            await form.parse(req, async function (err, fields, files, end) {\r\n                const {thumbnail} = files\r\n\r\n                const uploaded = await uploadFile({\r\n                    path: thumbnail.filepath,\r\n                    fileName:thumbnail.newFilename,\r\n                    mimetype: thumbnail.mimetype\r\n                })\r\n                const responsePublic = await generatePublic(uploaded.id)\r\n\r\n                return res.status(200).json({responsePublic, uploaded,prefix_url:process.env.PREFIX_DRIVE_URI})\r\n\r\n            })\r\n        }catch(err){\r\n            throw next(err)\r\n        }\r\n    })\r\n}\r\n"]}