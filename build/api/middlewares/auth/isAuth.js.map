{"version":3,"sources":["../../../../src/api/middlewares/auth/isAuth.js"],"names":["YuyuidConfig","Request","jwt","IGNORE_PATH","getTokenFromHeader","req","headers","authorization","split","isAuth","secret","jwtSecret","userProperty","getToken","credentialsRequired","algorithm","unless","path"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,cAAc,EAApB;;AAGA;;;;;;;;;AASA,MAAMC,qBAAsBC,GAAD,IAAQ;AAC/B;;;;AAIA,QACKA,IAAIC,OAAJ,CAAYC,aAAZ,IAA6BF,IAAIC,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,MAA4C,OAA1E,IACCH,IAAIC,OAAJ,CAAYC,aAAZ,IAA6BF,IAAIC,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,MAA4C,QAF9E,EAGE;AACE,eAAOH,IAAIC,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAP;AACH;;AAED,WAAO,IAAP;AACH,CAbD;;AAeA,MAAMC,SAASP,IAAI;AACfQ,YAASV,aAAaW,SADP,EACkB;AACjCC,kBAAc,OAFC,EAEQ;AACvBC,cAAUT,kBAHK,EAGe;AAC9BU,yBAAqB,KAJN;AAKfC,eAAW,CAAC,OAAD;AALI,CAAJ,EAMZC,MANY,CAML,EAAEC,MAAMd,WAAR,EANK,CAAf;;AAQA,eAAgBM,MAAhB","file":"isAuth.js","sourcesContent":["import { YuyuidConfig } from '@yuyuid/config'\r\nimport { Request } from 'express'\r\nimport jwt from 'express-jwt'\r\n\r\nconst IGNORE_PATH = [];\r\n\r\n\r\n/**\r\n * We are assuming that the JWT will come in a\r\n * header with the form\r\n *\r\n * `Authorization: Bearer ${JWT}`\r\n *\r\n * @param {Request} req Express req Object\r\n * @returns {(string | null )} Extracted Token or null\r\n */\r\nconst getTokenFromHeader = (req)=> {\r\n    /**\r\n     * Edge and Internet Explorer do some weird things with the headers\r\n     * So I believe that this should handle more 'edge' cases ;)\r\n     */\r\n    if (\r\n        (req.headers.authorization && req.headers.authorization.split(\" \")[0] === \"Token\") ||\r\n        (req.headers.authorization && req.headers.authorization.split(\" \")[0] === \"Bearer\")\r\n    ) {\r\n        return req.headers.authorization.split(\" \")[1]\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nconst isAuth = jwt({\r\n    secret : YuyuidConfig.jwtSecret, // The _secret_ to sign the JWTs\r\n    userProperty: \"token\", // Use req.token to store the JWT\r\n    getToken: getTokenFromHeader, // How to extract the JWT from the request\r\n    credentialsRequired: false,\r\n    algorithm: [\"HS256\"]\r\n}).unless({ path: IGNORE_PATH})\r\n\r\nexport default  isAuth\r\n"]}